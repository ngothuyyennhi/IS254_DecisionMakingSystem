# -*- coding: utf-8 -*-
"""GibbSampling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1A_XUdPhLvDm-Un993jhJqIWRQJ6pUSsn
"""

import pandas as pd
import numpy as np
import random
from sklearn.metrics import mean_squared_error
import seaborn as sns
import matplotlib.pyplot as plt

from google.colab import drive
drive.mount('/content/drive')

# Đọc dữ liệu từ các file CSV trong thư mục Test
ratings_path = "/content/drive/MyDrive/Test/ratings.csv"
movies_path = "/content/drive/MyDrive/Test/movies.csv"

ratings = pd.read_csv(ratings_path)
movies = pd.read_csv(movies_path)

ratings_sample = ratings.sample(n=50, random_state=42)

print(ratings_sample)

top_users = ratings_sample['userId'].value_counts().nlargest(1000).index
top_movies = ratings_sample['movieId'].value_counts().nlargest(1000).index

filtered_ratings = ratings_sample[ratings_sample['userId'].isin(top_users) & ratings_sample['movieId'].isin(top_movies)]

merged_df = pd.merge(movies, filtered_ratings, on='movieId')

users = merged_df['userId'].unique()
movies = merged_df['movieId'].unique()
ratings_matrix = pd.DataFrame(index=users, columns=movies)

# Điền giá trị ratings vào ma trận
for _, row in merged_df.iterrows():
    ratings_matrix.loc[row['userId'], row['movieId']] = row['rating']

# Thay NaN bằng giá trị ngẫu nhiên trong khoảng [1, 5]
ratings_matrix = ratings_matrix.applymap(lambda x: random.uniform(1, 5) if pd.isna(x) else x)

# Cập nhật mẫu Gibbs Sampling
def update_gibbs_sample(a, ratings_matrix, users, movies):
    for user in users:
        for movie in movies:
            # Tính toán giá trị trung bình và phương sai cho rating của user đối với các phim khác
            others = ratings_matrix.loc[user, [col for col in movies if col != movie]]
            mean_rating = others.mean()
            std_rating = others.std() if others.std() > 0 else 1

            # Lấy mẫu từ phân phối Gaussian
            new_rating = np.random.normal(mean_rating, std_rating)

            # Cập nhật giá trị rating trong ma trận
            ratings_matrix.loc[user, movie] = max(1, min(5, new_rating))  # Đảm bảo rating trong khoảng [1, 5]

# Gibbs Sampling
def gibbs_sample(ratings_matrix, users, movies, num_iterations):
    for _ in range(num_iterations):
        update_gibbs_sample(ratings_matrix, ratings_matrix, users, movies)

# Tạo mẫu Gibbs
num_iterations = 100
gibbs_sample(ratings_matrix, users, movies, num_iterations)

# Dự đoán rating
predicted_ratings = []
predicted_results = []

# Lấy rating dự đoán từ ma trận ratings_matrix
for _, row in ratings_sample.iterrows():
    user_id = row['userId']
    movie_id = row['movieId']

    # Dự đoán rating từ ma trận đã được cập nhật qua Gibbs Sampling
    predicted_rating = ratings_matrix.loc[user_id, movie_id]
    predicted_ratings.append(predicted_rating)

    # Lưu cặp (userId, movieId) và rating dự đoán để in
    predicted_results.append({
        'userId': user_id,
        'movieId': movie_id,
        'predicted_rating': predicted_rating
    })

# Chuyển kết quả dự đoán thành DataFrame để dễ dàng in
predicted_df = pd.DataFrame(predicted_results)

# In kết quả rating dự đoán ra màn hình
print("Predicted Ratings for users and movies:")
print(predicted_df)

# Dự đoán rating
predicted_ratings = []

# Lấy rating dự đoán từ ma trận ratings_matrix
for _, row in ratings_sample.iterrows():
    user_id = row['userId']
    movie_id = row['movieId']

    # Dự đoán rating từ ma trận đã được cập nhật qua Gibbs Sampling
    predicted_rating = ratings_matrix.loc[user_id, movie_id]
    predicted_ratings.append(predicted_rating)

# Lọc các giá trị rating thực tế (y_i)
true_ratings = []
for _, row in ratings_sample.iterrows():
    true_ratings.append(row['rating'])

rmse = np.sqrt(mean_squared_error(true_ratings, predicted_ratings))
print(f"RMSE: {rmse}")

